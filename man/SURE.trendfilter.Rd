% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SURE.trendfilter.R
\name{SURE.trendfilter}
\alias{SURE.trendfilter}
\title{Optimize the trend filtering hyperparameter (with respect to Stein's unbiased 
risk estimate)}
\usage{
SURE.trendfilter(
  x = NULL,
  y,
  sigma,
  lambda,
  k = 2,
  max_iter = 250,
  obj_tol = 1e-06
)
}
\arguments{
\item{x}{A vector of the observed inputs. If \code{NULL}, then we assume
unit spacing.}

\item{y}{A vector of the observed outputs.}

\item{sigma}{A vector of measurement standard errors for the observed outputs.}

\item{lambda}{A vector of trend filtering hyperparameter values to run the 
grid search over.}

\item{k}{The degree of the trend filtering estimator. Defaults to \code{k=2}
(quadratic trend filtering).}

\item{max_iter}{Maximum iterations allowed for the trend filtering 
ADMM optimization 
[\href{http://www.stat.cmu.edu/~ryantibs/papers/fasttf.pdf}{Ramdas & Tibshirani (2015)}]. 
Consider increasing this if the trend filtering estimate does not appear to 
have fully converged to a reasonable estimate of the signal.}

\item{obj_tol}{The tolerance used in the ADMM optimization stopping criterion; 
when the relative change in the objective function is less than this value, 
the algorithm terminates.}
}
\value{
A list with the following elements:
\item{lambda}{Vector of hyperparameter values tested.}
\item{SURE.loss}{Vector of estimated SURE errors for hyperparameter values.}
\item{lambda.min}{Hyperparameter value that minimizes the SURE curve.}
}
\description{
\code{SURE.trendfilter} computes the Stein's unbiased risk 
estimate of fixed-input mean-squared prediction error on a grid of 
hyperparameter values and returns the full error curve and the optimal
hyperparameter value.
}
\examples{
# Quasar spectrum example
# SDSS spectra are equally spaced in log base 10 wavelength space with a 
# separation of 10e-4 logarithmic Angstroms. 

data(quasar)


# Read in a spectrum of a quasar at redshift z = 2.953 and extract the
# Lyman-alpha forest.

log.wavelength.scaled <- quasar.spec$col[[2]] * 1000
flux <- quasar.spec$col[[1]]
wts <- quasar.spec$col[[3]]
lya.rest.wavelength <- 1215.67
inds <- which((10^(log.wavelength.scaled/1000))/(2.953 + 1) < lya.rest.wavelength + 40)
log.wavelength.scaled <- log.wavelength.scaled[inds]
flux <- flux[inds]
wts <- wts[inds]


# Compute the SURE error curve and the optimal hyperparameter value

lambda.grid <- exp(seq(-10, 7, length = 250))
SURE.out <- SURE.trendfilter(x = log.wavelength.scaled, 
                             y = flux, 
                             sigma = 1 / sqrt(wts), 
                             lambda = lambda.grid
                             )
lambda.min <- SURE.out$lambda.min


# Fit the optimized trend filtering estimate

fit <- glmgen::trendfilter(x = log.wavelength.scaled, 
                           y = flux, 
                           weights = wts, 
                           k = 2, 
                           lambda = lambda.min
                           )


# Plot the results

par(mfrow=c(2,1))
plot(log(lambda.grid), SURE.out$SURE.loss, xlab = "log(lambda)", ylab = "SURE")
abline(v = log(lambda.min), col = "red")
wavelength <- 10 ^ (log.wavelength.scaled / 1000)
plot(wavelength, flux, type = "l")
lines(wavelength, fit$beta, col = "orange", lwd = 2.5)
}
\seealso{
\link{bootstrap.trendfilter}
}
\author{
Collin A. Politsch, \email{collinpolitsch@gmail.com}
}
