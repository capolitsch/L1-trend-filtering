% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap.trendfilter.R
\name{bootstrap.trendfilter}
\alias{bootstrap.trendfilter}
\title{Bootstrap the optimized trend filtering estimator to obtain pointwise 
variability bands}
\usage{
bootstrap.trendfilter(
  x,
  y,
  sigma,
  lambda.min,
  k = 2,
  x.eval.grid = x,
  bootstrap.method = "nonparametric",
  alpha = 0.05,
  B = 1000,
  full.ensemble = FALSE,
  max_iter = 250,
  obj_tol = 1e-07,
  mc.cores = max(c(parallel::detectCores() - 2), 1)
)
}
\arguments{
\item{x}{A vector of the observed inputs.}

\item{y}{A vector of the observed outputs.}

\item{sigma}{A vector of measurement standard errors for the observed outputs.}

\item{lambda.min}{The optimally-tuned trend filtering hyperparameter, e.g. by 
minimizing SURE (see \code{\link{SURE.trendfilter}}) or cross validation.}

\item{k}{The degree of the trend filtering estimator. Defaults to \code{k=2}
(quadratic trend filtering).}

\item{x.eval.grid}{Grid of inputs to evaluate the variability bands on. 
Defaults to the observed inputs.}

\item{bootstrap.method}{Bootstrap method to be used. See Details section
below for suggested use. Defaults to "nonparametric".}

\item{alpha}{Specifies the width of the \code{1-alpha} pointwise variability 
bands.}

\item{B}{The number of bootstrap samples used to compute the variability 
bands.}

\item{full.ensemble}{Return the full bootstrap ensemble as an \code{n x B} 
matrix. Defaults to \code{FALSE}.}

\item{max_iter}{Maximum iterations allowed for the trend filtering 
convex optimization 
\href{https://stat.cmu.edu/~ryantibs/papers/fasttf.pdf}{
Ramdas & Tibshirani (2015)}. 
Consider increasing this if the bootstrap estimates do not appear to 
have fully converged to a reasonable estimate of the signal.}

\item{obj_tol}{The tolerance used in the convex optimization stopping 
criterion; when the relative change in the objective function is less than 
this value, the algorithm terminates. Consider decreasing this if the 
bootstrap estimates do not appear to have fully converged to a reasonable 
estimate of the signal.}

\item{mc.cores}{Multi-core computing (for speedups): The number of cores to
utilize. Defaults to the number detected on the machine minus 2.}
}
\value{
A list with the following elements:
\item{bootstrap.lower.perc.intervals}{Vector of lower bounds for the 1-alpha 
pointwise variability band.}
\item{bootstrap.upper.perc.intervals}{Vector of upper bounds for the 1-alpha 
pointwise variability band.}
\item{tf.boot.ensemble}{(Optional) The full bootstrap ensemble as an 
\code{n x B} matrix.}
}
\description{
\code{bootstrap.trendfilter} implements any of three possible 
bootstrap algorithms to obtain pointwise variability bands to accompany the 
optimized trend filtering estimate of a signal.
}
\details{
The bootstrap method should generally be chosen 
according to the following criteria: \cr \cr
S1. The inputs are irregularly 
sampled –> \code{bootstrap.method = "nonparametric"} \cr \cr
S2. The inputs are regularly 
sampled and the noise distribution is known –> 
\code{bootstrap.method = "parametric"} \cr \cr
S3. The inputs are regularly sampled and the noise distribution is unknown –> 
\code{bootstrap.method = "wild"} \cr
}
\examples{
#############################################################################
########################## Quasar spectrum example ##########################
#############################################################################

# SDSS spectra are equally spaced in log base 10 wavelength space with a 
# separation of 10e-4 logarithmic Angstroms. 

data(quasar_spec)
set.seed(1)


# Read in a spectrum of a quasar at redshift z = 2.953 and extract the 
# Lyman-alpha forest.

log.wavelength.scaled <- quasar_spec$col[[2]] * 1000
flux <- quasar_spec$col[[1]]
wts <- quasar_spec$col[[3]]
lya.rest.wavelength <- 1215.67
quasar.redshift <- 2.953
inds <- which((10^(log.wavelength.scaled/1000))/(quasar.redshift + 1) < lya.rest.wavelength + 40)
log.wavelength.scaled <- log.wavelength.scaled[inds]
flux <- flux[inds]
wts <- wts[inds]


# Compute the SURE error curve and the optimal hyperparameter value

lambda.grid <- exp(seq(-10, 7, length = 250))
SURE.out <- SURE.trendfilter(x = log.wavelength.scaled, 
                             y = flux, 
                             sigma = 1 / sqrt(wts), 
                             lambda = lambda.grid
                             )
lambda.min <- SURE.out$lambda.min


# Fit the optimized trend filtering estimate

fit <- glmgen::trendfilter(x = log.wavelength.scaled, 
                           y = flux, 
                           weights = wts, 
                           k = 2, 
                           lambda = lambda.min
                           )


# Plot the results

# addTrans() adds transparancy to a color. Define transparancy with an 
# integer between 0 and 255, 0 being fully transparant and 255 being fully 
# visable. Works with either color and trans a vector of equal length, or one
# of the two of length 1.
addTrans <- function(color,trans){
if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))

num2hex <- function(x)
{
  hex <- unlist(strsplit("0123456789ABCDEF",split=""))
  return(paste(hex[(x-x\%\%16)/16+1],hex[x\%\%16+1],sep=""))
}
rgb <- rbind(col2rgb(color),trans)
res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
return(res)
}

par(mfrow = c(2,1), mar = c(5,4,2.5,1) + 0.1)
plot(log(lambda.grid), SURE.out$SURE.error, xlab = "log(lambda)", ylab = "SURE",
     main = "SURE error curve")
abline(v = log(lambda.min), col = "blue3", lty = 2)
text(x = log(lambda.min), y = par("usr")[4], pos = 1, col = "blue3", 
     labels = c("optimal hyperparameter"))
wavelength <- 10 ^ (log.wavelength.scaled / 1000)
plot(wavelength, flux, type = "l", main = "Quasar Lyman-alpha forest", 
     xlab = "Observed wavelength (angstroms)")
lines(wavelength, fit$beta, col = "orange", lwd = 2.5)

boot.out <- bootstrap.trendfilter(x = log.wavelength.scaled, 
                                  y = flux, 
                                  sigma = sqrt(1/wts),
                                  lambda.min = lambda.min, 
                                  bootstrap.method = "parametric"
                                  )
                                  
polygon(c(wavelength, rev(wavelength)), 
        c(boot.out$bootstrap.lower.perc.intervals, rev(boot.out$bootstrap.upper.perc.intervals)),
        col = addTrans("orange", 90), border=NA)
lines(wavelength, boot.out$bootstrap.lower.perc.intervals, col = "orange", lwd = 0.5)
lines(wavelength, boot.out$bootstrap.upper.perc.intervals, col = "orange", lwd = 0.5)
legend(x = "topleft", lty = 1, col = c("orange", addTrans("orange", 90)), 
       lwd = c(2,8), legend = c("Trend filtering estimate", "95 percent variability band"))
}
\references{
\enumerate{
\item \href{https://academic.oup.com/mnras/article/492/3/4005/5704413}{
Politsch et al. (2020). Trend filtering – I. A modern statistical tool for 
time-domain astronomy and astronomical spectroscopy} \cr

\item \href{https://academic.oup.com/mnras/article/492/3/4019/5704414}{
Politsch et al. (2020). Trend filtering – II. Denoising astronomical signals 
with varying degrees of smoothness} \cr

\item \href{https://projecteuclid.org/journals/annals-of-statistics/volume-7/issue-1/Bootstrap-Methods-Another-Look-at-the-Jackknife/10.1214/aos/1176344552.full}{
Efron (1979). Bootstrap Methods: Another Look at the Jackknife} \cr

\item \href{https://academic.oup.com/mnras/article/492/3/4019/5704414}{
Efron and Tibshirani (1986). Bootstrap Methods for Standard Errors, 
Confidence Intervals, and Other Measures of Statistical Accuracy} \cr

\item \href{https://projecteuclid.org/journals/annals-of-statistics/volume-14/issue-4/Jackknife-Bootstrap-and-Other-Resampling-Methods-in-Regression-Analysis/10.1214/aos/1176350142.full}{
Wu (1986). Jackknife, Bootstrap and Other Resampling Methods in Regression 
Analysis} \cr
}
}
\seealso{
\code{\link{SURE.trendfilter}}
}
\author{
Collin A. Politsch, \email{collinpolitsch@gmail.com}
}
